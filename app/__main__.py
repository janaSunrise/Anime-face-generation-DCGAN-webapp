import os
import time

import torch
import streamlit as st
from PIL import Image

from . import SAVE_DIR
from .model import discriminator, generator
from .utils import save_samples, get_files_in_dir

os.makedirs(SAVE_DIR, exist_ok=True)

# Load and evaluate models
generator.load_state_dict(torch.load("app/models/generator_model.bin", map_location=torch.device('cpu')))
discriminator.load_state_dict(torch.load("app/models/discriminator_model.bin", map_location=torch.device('cpu')))

# Finally, Evaluate them
generator.eval()
discriminator.eval()

# -- Config the warnings -- #
st.set_option('deprecation.showfileUploaderEncoding', False)

# -- The views -- #
st.title("Anime image generation")
st.header("Anime face image generation using Deep Convolutional GANs")

st.header("\n\n")

if __name__ == '__main__':
    if st.sidebar.button("Click here to generate images!"):
        with st.spinner("Generating..."):
            save_samples(generator)
            filename = get_files_in_dir(SAVE_DIR)[0]

            time.sleep(1)

            st.success("Generation done!")
            st.balloons()

            image = Image.open(filename)
            st.image(image, caption="Anime generated by DCGAN")
